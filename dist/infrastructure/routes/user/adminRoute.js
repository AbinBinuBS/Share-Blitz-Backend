"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const adminController_1 = __importDefault(require("../../../adapters/controllers/admin/adminController"));
const postRepository_1 = __importDefault(require("../../database/repositories/user/postRepository"));
const userRepository_1 = __importDefault(require("../../database/repositories/user/userRepository"));
const reportRepository_1 = __importDefault(require("../../database/repositories/user/reportRepository"));
const adminUseCase_1 = __importDefault(require("../../../application/useCase/admin/adminUseCase"));
const jwtToken_1 = __importDefault(require("../../utils/helpers/jwtToken"));
const hashPassword_1 = __importDefault(require("../../utils/helpers/hashPassword"));
const authMiddleware_1 = require("../../middleware/authMiddleware");
const verificationRepository_1 = __importDefault(require("../../database/repositories/user/verificationRepository"));
const repositoryPost = new postRepository_1.default();
const repositoryUser = new userRepository_1.default();
const repositoryReports = new reportRepository_1.default();
const repositoryVerification = new verificationRepository_1.default();
const jwt = new jwtToken_1.default();
const hashedPassword = new hashPassword_1.default();
const adminCase = new adminUseCase_1.default(repositoryPost, repositoryUser, repositoryReports, repositoryVerification, jwt, hashedPassword);
const controller = new adminController_1.default(adminCase);
const router = express_1.default.Router();
router.get('/getAllUsers', authMiddleware_1.adminAuth, (req, res) => { controller.getAllUsers(req, res); });
router.get('/getAllPosts/:page', authMiddleware_1.adminAuth, (req, res) => { controller.getAllPosts(req, res); });
router.get('/getUserById', (req, res) => { controller.getUser(req, res); });
router.get('/getAllReportedPosts', authMiddleware_1.adminAuth, (req, res) => { controller.getAllReportedPosts(req, res); });
router.get('/getReportsByPostId', authMiddleware_1.adminAuth, (req, res) => { controller.getReportsByPostId(req, res); });
router.get('/getPostById', authMiddleware_1.adminAuth, (req, res) => { controller.getPostById(req, res); });
router.patch('/toogleUserStatus', authMiddleware_1.adminAuth, (req, res) => { controller.toogleUserStatus(req, res); });
router.patch('/tooglePostIsBlocked', authMiddleware_1.adminAuth, (req, res) => { controller.tooglePostIsBlocked(req, res); });
router.patch('/changeActionStatus', authMiddleware_1.adminAuth, (req, res) => { controller.changeActionStatus(req, res); });
router.patch('/approveVerificationRequest', authMiddleware_1.adminAuth, (req, res) => { controller.approveVerificationRequest(req, res); });
router.delete('/deletePost', authMiddleware_1.adminAuth, (req, res) => { controller.deletePost(req, res); });
router.get('/getVerificationData', authMiddleware_1.adminAuth, (req, res) => { controller.getVerificationData(req, res); });
//////////////////// Admin Dashboard  //////////////////////////////
router.get('/dashboard/cardsData', authMiddleware_1.adminAuth, (req, res, next) => { controller.cardsData(req, res, next); });
exports.default = router;
