"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const chatController_1 = __importDefault(require("../../../adapters/controllers/user/chatController"));
const userRepository_1 = __importDefault(require("../../database/repositories/user/userRepository"));
const chatRoomRepository_1 = __importDefault(require("../../database/repositories/user/chatRoomRepository"));
const chatMessageRepository_1 = __importDefault(require("../../database/repositories/user/chatMessageRepository"));
const chatUseCase_1 = __importDefault(require("../../../application/useCase/user/chatUseCase"));
const jwtToken_1 = __importDefault(require("../../utils/helpers/jwtToken"));
const hashPassword_1 = __importDefault(require("../../utils/helpers/hashPassword"));
const authMiddleware_1 = __importDefault(require("../../middleware/authMiddleware"));
const socket_io_1 = require("socket.io");
const socket_1 = __importDefault(require("../../Socket/socket"));
const repositoryUser = new userRepository_1.default();
const repositoryRoom = new chatRoomRepository_1.default();
const repositoryMessage = new chatMessageRepository_1.default();
const jwt = new jwtToken_1.default();
const hashedPassword = new hashPassword_1.default();
const io = new socket_io_1.Server();
(0, socket_1.default)(io);
const chatUseCase = new chatUseCase_1.default(repositoryUser, repositoryRoom, repositoryMessage, jwt, hashedPassword, io);
const controller = new chatController_1.default(chatUseCase);
const router = express_1.default.Router();
router.get('/recentChats', authMiddleware_1.default, (req, res, next) => { controller.getRecentChatedUsers(req, res, next); });
router.get('/messages/:id', (req, res, next) => { controller.findMessageById(req, res, next); });
router.get('/messages/getAllMessages/:id', authMiddleware_1.default, (req, res, next) => { controller.getMessage(req, res, next); });
router.post('/messages/send/:id', authMiddleware_1.default, (req, res, next) => { controller.sendMessage(req, res, next); });
router.delete('/messages/deleteMessage', authMiddleware_1.default, (req, res, next) => { controller.deleteMessage(req, res, next); });
router.patch('/messages/editMessage', authMiddleware_1.default, (req, res, next) => { controller.editMessage(req, res, next); });
router.patch('/messages/markAsRead/:selectedUserId', authMiddleware_1.default, (req, res, next) => { controller.markMessageAsRead(req, res, next); });
router.get('/messages/unReadedMessages/:roomId', authMiddleware_1.default, (req, res, next) => { controller.unReadedMessages(req, res, next); });
router.post('/groupChat', authMiddleware_1.default, (req, res, next) => { controller.CreateGroupChat(req, res, next); });
router.post('/groupMessage/:roomId', authMiddleware_1.default, (req, res, next) => { controller.SendGroupMessage(req, res, next); });
router.get('/messages/getAllMessagesByRoom/:roomId', authMiddleware_1.default, (req, res, next) => { controller.GetMessagesByRoom(req, res, next); });
router.patch('/groupChat/removeParticipants', authMiddleware_1.default, (req, res, next) => { controller.RemoveParticipantsFromGroupChat(req, res, next); });
exports.default = router;
